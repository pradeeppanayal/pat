__author__='Pradeep CH'
__version__ ='1.0.0'
__date__= '10- Mar- 2017'

import datetime

class Config(object):
   def __init__(self):
      self.subnets = []
   def getAsJson(self):
      subnetsJson = []
      for subnet in self.subnets:
         subnetsJson.append(subnet.getAsJson());
      return {'subnets':subnetsJson}

   def getAsConfig(self):
      subnetConfig = ''
      for subnet in self.subnets:
         subnetConfig += subnet.getAsConfig()

      config = '''
#-----------------------------------		
#This config is generated by PAT 2.0  
#Avoid editing this file manually
#----------------------------------
		
default-lease-time 600;
max-lease-time 7200;
authoritative;
log-facility local7;
ping-check true;

#----------------- Subnets---------------		
	%s 
#---------------End of Subnets ---------''' %subnetConfig

      return config

#subnet
class Subnet(object):
   def __init__(self):
      self.subnet = ""
      self.netmask =""
      self.hosts =[]
      self.pools = []

   def getAsJson(self):
      poolObject = []
      hostObject =[]
      for pool in self.pools:
          poolObject.append(pool.getAsJson())
      for host in self.hosts:
          hostObject.append(host.getAsJson())
      return {'subnet':self.subnet,'netmask':self.netmask,'hosts':hostObject,'pools':poolObject}

   def loadData(self,a):
      self.subnet=a['subnet']
      self.netmask = a['netmask']
      self.hosts = a['hosts']
      self.pools = a['pools']

   def getAsConfig(self):
      poolConfig = ''
      for pool in self.pools:
         poolConfig += pool.getAsConfig()

      hostConfig =''
      for host in self.hosts:
         hostConfig = host.getAsConfig()

      config = '''
subnet %s netmask %s {
#------------------ Summary --------------------
#Pools : %d
#Hosts : %d
#---------------- End Summary ------------------

#----------- Hosts will be listed here----------
%s
#----------------- End of Hosts ----------------
#---------- Pools will be listed here ----------
%s
#---------- End of Pools ----------
		
}''' %(self.subnet,self.netmask,len(self.pools),len(self.hosts),hostConfig,poolConfig)
      return config
		
#POOL

class Pool(object):
   def __init__(self):
      self.assignedDate = "no details"
      self.rangeStart = ""
      self.rangeEnd = ""
      self.bootfileName = ""
      self.subnetMask = ""
      self.routers = ""
      self.status = "Unassigned"
      self.hosts =[]

   def makeAssigned(self):
      self.assignedDate =str(datetime.datetime.now().date())

   def setAssigned(self,date):
      self.assignedDate =str(date)

   def loadData(self,a):
      self.assignedDate = a["assignedDate"]
      self.rangeStart = a[ "rangeStart"]
      self.rangeEnd = a[ "rangeEnd"]
      self.bootfileName =  a["bootfileName"]
      self.subnetMask =  a["subnetMask"]
      self.routers =  a["routers"]
      self.status =  a["status"]
      self.hosts = a['hosts']


   def getAsJson(self):
      hostObject = []
      for host in self.hosts:
          hostObject.append(host.getAsJson())
      return {'rangeStart':self.rangeStart,'rangeEnd':self.rangeEnd,'bootfileName':self.bootfileName,'status':self.status,'subnetMask':self.subnetMask,'routers':self.routers,'hosts':hostObject,"assignedDate":self.assignedDate}
   def getAsConfig(self):
      config =''
      hostConfig = ''
      for host in self.hosts:
         hostConfig += host.getAsConfig()
      config = '''
	pool {
		range %s %s;
               	option bootfile-name "%s";
               	option subnet-mask %s;
               	option routers %s;
			
		#------------- Summary ---------------------
		#Hosts : %d
		#------------- End of Summary --------------

		#-------------- Hosts-----------------------
		%s
		#-------------- End of hosts----------------
			
	}''' %(self.rangeStart,self.rangeEnd,self.bootfileName,self.subnetMask,self.routers, len(self.hosts),hostConfig)
      return config

#Host
class Host(object):
   def __init__(self):
      self.name =''
      self.mac =''
      self.ip =''
      self.bootfileName = ""
   def getAsJson(self):
      return {'mac':self.mac,'ip':self.ip,'name':self.name}


   def loadData(self,a):
      self.name =a['name']
      self.mac =a['mac']
      self.ip =a['ip']
      self.bootfileName = a['bootfileName']

   def getAsConfig(self): 
      config = '''
		host %s {
  			hardware ethernet %s;
			fixed-address %s;
		}''' %(self.name,self.mac,self.ip)
      return config

